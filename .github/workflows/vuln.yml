---
name: check vulns

"on":
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BASE_IMAGE: cgr.dev/chainguard/python

jobs:
  check:
    name: check vulns
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: checkout project
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - name: get base image
        id: base
        run: |
          set -x
          DIGEST="$(awk -F '=' '/ARG DIGEST/ {print $2}' Dockerfile)"
          echo "Base image: ${BASE_IMAGE}@${DIGEST}"
          echo "image=${BASE_IMAGE}@${DIGEST}" >> $GITHUB_OUTPUT
      - name: install cosign
        uses: sigstore/cosign-installer@c3667d99424e7e6047999fb6246c0da843953c65
      # compare cve from latest base image (chainguard-images release)
      # and actually used base image inside rwalk image (flyio deploy)
      #
      # fail only if "now cve" > "latest cve" (trivy or grype)
      - name: cve count
        run: |
          set -x
          CVE_COUNT=(-1 -1)
          CVE_LATEST_COUNT=(-1 -1)
          CVE_COUNT=($(cosign download attestation "${{ steps.base.outputs.image }}" \
            | jq -r .payload | base64 -d \
            | jq '.predicate.scanner.result.runs[0].results | length' | xargs))
          CVE_LATEST_COUNT=($(cosign download attestation ${BASE_IMAGE}:latest-dev \
            | jq -r .payload | base64 -d \
            | jq '.predicate.scanner.result.runs[0].results | length' | xargs))
          # stdout job summary
          echo "TRIVY_COUNT: ${CVE_COUNT[0]} vs ${CVE_LATEST_COUNT[0]}"
          echo "GRYPE_COUNT: ${CVE_COUNT[1]} vs ${CVE_LATEST_COUNT[1]}"
          # markdown job summary
          echo "### Check vulnerabilities summary" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          echo "|        |  TRIVY  |  GRYPE  |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|:-------:|:-------:|" >> $GITHUB_STEP_SUMMARY
          echo "| flyio  |  ${CVE_COUNT[0]}  |  ${CVE_COUNT[1]}  |" >> $GITHUB_STEP_SUMMARY
          echo "| latest |  ${CVE_LATEST_COUNT[0]}  |  ${CVE_LATEST_COUNT[1]}  |" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          # job fail logic
          [ ${CVE_COUNT[0]} -le ${CVE_LATEST_COUNT[0]} ] && [ ${CVE_COUNT[1]} -le ${CVE_LATEST_COUNT[1]} ] \
            || (echo "#### rwalk deployed image insecure :x:" >> $GITHUB_STEP_SUMMARY \
            && exit 1)
          echo "#### rwalk deployed image secure :heavy_check_mark:" >> $GITHUB_STEP_SUMMARY
